# Dear Github Actions
#   well, you know what, FUCK AUTOMATION! FUCK TESTING! AND FUCK YOOUU!!
#   I wish I could neo fucking tribeam you
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release
  c_compiler: gcc
  cpp_compiler: g++
  config_preset: release-default
  generator: "Ninja"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Cache apt packages
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/cmake.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install required dependencies including Ninja
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxinerama-dev \
            libxcursor-dev \
            xorg-dev \
            libglu1-mesa-dev \
            pkg-config \
            ninja-build \
            ccache

      # Set up ccache
      - name: Create ccache directory
        run: mkdir -p ~/.ccache

      - name: Cache ccache output
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Configure ccache
        run: |
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo 'export PATH="/usr/lib/ccache:$PATH"' >> ~/.bashrc
          source ~/.bashrc

      # Ensure vcpkg directories exist
      - name: Ensure vcpkg directories exist
        run: |
          mkdir -p ~/.cache/vcpkg/archives
          mkdir -p ${{ github.workspace }}/build/vcpkg_installed

      # Cache vcpkg downloads
      - name: Cache vcpkg archives
        uses: actions/cache@v3
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-vcpkg-archives-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-archives-

      # Cache vcpkg installed packages
      - name: Cache vcpkg installed
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build/vcpkg_installed
          key: ${{ runner.os }}-vcpkg-installed-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-

      # Cache CMake build directory (excluding vcpkg_installed which is cached separately)
      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/build
            !${{ github.workspace }}/build/vcpkg_installed
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: ccache statistics before build
        run: ccache -s

      - name: Configure CMake
        run: >
          cmake --preset ${{ env.config_preset }} -B ${{ github.workspace }}/build 
          -G "${{ env.generator }}"
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER=${{ env.cpp_compiler }} 
          -DCMAKE_C_COMPILER=${{ env.c_compiler }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: ccache statistics after build
        run: ccache -s

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}
